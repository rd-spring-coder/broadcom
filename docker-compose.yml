version: '3.7'
services:
  api:
    build:
      context: userservice # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - APP_CORS_ORIGINS=http://localhost:9090
    networks:
      - backend
      - frontend

  # Frontend Service 
  app-client:
    build:
      context: userclient # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
      - "9090:80" # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - api
    networks:
      - frontend
  postgres:
    image: postgres:14.1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend  
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      # copy create table script
      - ./scripts/create_table.sql:/docker-entrypoint-initdb.d/create_tables.sql

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:    